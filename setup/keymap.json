[
  // Essential Zed bindings (non-conflicting with vim)
  {
    "use_key_equivalents": true,
    "bindings": {
      // Core application
      "cmd-,": "zed::OpenSettings",
      "cmd-q": "zed::Quit",
      "cmd-h": "zed::Hide",
      "alt-cmd-h": "zed::HideOthers",
      "cmd-m": "zed::Minimize",
      "fn-f": "zed::ToggleFullScreen",
      "ctrl-cmd-f": "zed::ToggleFullScreen",
      
      // Font size
      "cmd-=": ["zed::IncreaseBufferFontSize", { "persist": false }],
      "cmd-+": ["zed::IncreaseBufferFontSize", { "persist": false }],
      "cmd--": ["zed::DecreaseBufferFontSize", { "persist": false }],
      "cmd-0": ["zed::ResetBufferFontSize", { "persist": false }],
      
      // Debugger (F-keys don't conflict with vim)
      "f4": "debugger::Start",
      "shift-f5": "debugger::Stop",
      "shift-cmd-f5": "debugger::RerunSession",
      "f6": "debugger::Pause",
      "f7": "debugger::StepOver",
      "ctrl-f11": "debugger::StepInto",
      "shift-f11": "debugger::StepOut",
      
      // Window management
      "cmd-shift-w": "workspace::CloseWindow",
      "shift-escape": "workspace::ToggleZoom",
      "cmd-o": "workspace::Open"
    }
  },

  // Terminal context - FIXED escape handling
  {
    "context": "Terminal",
    "use_key_equivalents": true,
    "bindings": {
      // Terminal-specific actions (escape stays in terminal)
      "escape": ["terminal::SendKeystroke", "escape"],
      "enter": ["terminal::SendKeystroke", "enter"],
      "ctrl-c": ["terminal::SendKeystroke", "ctrl-c"],
      
      // Universal navigation (works everywhere including terminal)
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight", 
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      
      // Terminal utilities
      "cmd-c": "terminal::Copy",
      "cmd-v": "terminal::Paste",
      "cmd-f": "buffer_search::Deploy",
      "cmd-a": "editor::SelectAll",
      "cmd-k": "terminal::Clear",
      "cmd-n": "workspace::NewTerminal",
      "ctrl-\\": "terminal_panel::ToggleFocus",
      
      // Vim-style terminal control
      "cmd-backspace": ["terminal::SendText", "\\u0015"],
      "alt-delete": ["terminal::SendText", "\\u001bd"],
      "cmd-delete": ["terminal::SendText", "\\u000b"],
      
      // Navigation shortcuts
      "cmd-right": ["terminal::SendText", "\\u0005"],
      "cmd-left": ["terminal::SendText", "\\u0001"],
      "alt-left": ["terminal::SendText", "\\u001bb"],
      "alt-right": ["terminal::SendText", "\\u001bf"],
      "alt-b": ["terminal::SendText", "\\u001bb"],
      "alt-f": ["terminal::SendText", "\\u001bf"],
      
      // Scrolling
      "shift-pageup": "terminal::ScrollPageUp",
      "cmd-up": "terminal::ScrollPageUp",
      "shift-pagedown": "terminal::ScrollPageDown", 
      "cmd-down": "terminal::ScrollPageDown",
      "shift-up": "terminal::ScrollLineUp",
      "shift-down": "terminal::ScrollLineDown",
      "shift-home": "terminal::ScrollToTop",
      "cmd-home": "terminal::ScrollToTop",
      "shift-end": "terminal::ScrollToBottom",
      "cmd-end": "terminal::ScrollToBottom",
      
      // AI assistance in terminal
      "ctrl-enter": "assistant::InlineAssist",
      
      // Pane splitting from terminal
      "ctrl-alt-up": "pane::SplitUp",
      "ctrl-alt-down": "pane::SplitDown", 
      "ctrl-alt-left": "pane::SplitLeft",
      "ctrl-alt-right": "pane::SplitRight"
    }
  },

  // Vim Normal & Visual modes
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // Universal navigation (vim-style hjkl)
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      
      // Git workflow
      "space g h d": "editor::ToggleSelectedDiffHunks",
      "space g s": "git_panel::ToggleFocus",
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPreviousHunk",
      
      // LSP & Code actions
      "space c a": "editor::ToggleCodeActions",
      "space .": "editor::ToggleCodeActions", 
      "space c r": "editor::Rename",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",
      
      // Diagnostics
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",
      "] e": "editor::GoToDiagnostic",
      "[ e": "editor::GoToPreviousDiagnostic",
      "space x x": "diagnostics::Deploy",
      
      // Symbols & Navigation
      "s s": "outline::Toggle",
      "s S": "project_symbols::Toggle",
      
      // Buffer management
      "shift-h": "pane::ActivatePreviousItem",
      "shift-l": "pane::ActivateNextItem",
      "shift-q": "pane::CloseActiveItem",
      "ctrl-q": "pane::CloseActiveItem",
      "space b d": "pane::CloseActiveItem",
      "space b o": "pane::CloseOtherItems",
      
      // File operations
      "ctrl-s": "workspace::Save",
      "space space": "file_finder::Toggle",
      "space /": "pane::DeploySearch",
      "space e": "pane::RevealInProjectPanel",
      
      // AI Assistant
      "space a c": "agent::ToggleFocus",
      
      // Utilities
      "space t i": "editor::ToggleInlayHints",
      "space u w": "editor::ToggleSoftWrap",
      "space c z": "workspace::ToggleCenteredLayout",
      
      // Markdown
      "space m p": "markdown::OpenPreview",
      "space m P": "markdown::OpenPreviewToTheSide",
      
      // Project & Search
      "space f p": "projects::OpenRecent",
      "space s w": "pane::DeploySearch",
      
      // Go to file
      "g f": "editor::OpenExcerpts"
    }
  },

  // Vim Normal mode only
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // Additional normal mode bindings can go here
      "space r t": ["task::Spawn", { "reveal": "no_focus" }]
    }
  },

  // Vim Visual mode - Comments
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu", 
    "bindings": {
      "g c": "editor::ToggleComments"
    }
  },

  // Vim Insert mode - Better escape
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "j j": "vim::NormalBefore",
      "j k": "vim::NormalBefore"
    }
  },

  // Vim rename operator
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "r": "editor::Rename",
      "c": "vim::CurrentLine",
      "a": "editor::ToggleCodeActions"
    }
  },

  // Core Editor (essential Zed functionality)
  {
    "context": "Editor",
    "use_key_equivalents": true,
    "bindings": {
      // Basic editing
      "escape": "editor::Cancel",
      "backspace": "editor::Backspace",
      "delete": "editor::Delete",
      "tab": "editor::Tab",
      "shift-tab": "editor::Backtab",
      
      // Copy/paste/undo
      "cmd-x": "editor::Cut",
      "cmd-c": "editor::Copy", 
      "cmd-v": "editor::Paste",
      "cmd-z": "editor::Undo",
      "cmd-shift-z": "editor::Redo",
      
      // VS Code compatibility (non-conflicting)
      "cmd-[": "editor::Outdent",
      "cmd-]": "editor::Indent",
      "cmd-/": ["editor::ToggleComments", { "advance_downwards": false }],
      "f2": "editor::Rename",
      "f12": "editor::GoToDefinition",
      "alt-f12": "editor::GoToDefinitionSplit",
      "shift-f12": "editor::GoToImplementation",
      "alt-shift-f12": "editor::FindAllReferences",
      
      // Code folding
      "alt-cmd-[": "editor::Fold",
      "alt-cmd-]": "editor::UnfoldLines",
      
      // Breakpoints
      "f9": "editor::ToggleBreakpoint",
      "shift-f9": "editor::EditLogBreakpoint"
    }
  },

  // Full Editor mode
  {
    "context": "Editor && mode == full",
    "use_key_equivalents": true,
    "bindings": {
      "shift-enter": "editor::Newline",
      "enter": "editor::Newline",
      "cmd-enter": "editor::NewlineBelow",
      "cmd-shift-enter": "editor::NewlineAbove",
      "cmd-f": "buffer_search::Deploy",
      "cmd-alt-f": "buffer_search::DeployReplace",
      "cmd->": "assistant::QuoteSelection",
      "cmd-<": "assistant::InsertIntoEditor",
      "ctrl-g": "go_to_line::Toggle",
      "cmd-shift-o": "outline::Toggle"
    }
  },

  // Universal Workspace navigation 
  {
    "context": "Workspace",
    "use_key_equivalents": true,
    "bindings": {
      // Universal ctrl+hjkl navigation
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp", 
      "ctrl-j": "workspace::ActivatePaneDown",
      
      // File operations
      "cmd-s": "workspace::Save",
      "cmd-k s": "workspace::SaveWithoutFormat",
      "cmd-shift-s": "workspace::SaveAs",
      "cmd-shift-n": "workspace::NewWindow",
      
      // Dock management
      "cmd-b": "workspace::ToggleLeftDock",
      "cmd-alt-b": "workspace::ToggleRightDock",
      "cmd-r": "workspace::ToggleRightDock",
      "cmd-j": "workspace::ToggleBottomDock",
      "ctrl-\\": "terminal_panel::ToggleFocus",
      
      // Pane management
      "cmd-1": ["workspace::ActivatePane", 0],
      "cmd-2": ["workspace::ActivatePane", 1],
      "cmd-3": ["workspace::ActivatePane", 2],
      "cmd-4": ["workspace::ActivatePane", 3],
      
      // Tools
      "cmd-t": "project_symbols::Toggle",
      "cmd-p": "file_finder::Toggle",
      "cmd-shift-p": "command_palette::Toggle",
      "cmd-shift-f": "pane::DeploySearch",
      "cmd-shift-h": ["pane::DeploySearch", { "replace_enabled": true }],
      "cmd-?": "agent::ToggleFocus",
      
      // Panel toggles
      "cmd-shift-e": "project_panel::ToggleFocus",
      "ctrl-shift-g": "git_panel::ToggleFocus",
      "cmd-shift-d": "debug_panel::ToggleFocus"
    }
  },

  // Workspace without Terminal
  {
    "context": "Workspace && !Terminal",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-n": "workspace::NewFile",
      "cmd-shift-r": "task::Spawn",
      "cmd-alt-r": "task::Rerun"
    }
  },

  // Empty pane - essential shortcuts
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      "space space": "file_finder::Toggle",
      "space f p": "projects::OpenRecent"
    }
  },

  // Project Panel (vim-style file operations)
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      // Vim-style file ops
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory", 
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      
      // Navigation
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      
      // Close panel
      "q": "workspace::ToggleRightDock",
      "space e": "workspace::ToggleRightDock",
      
      // Standard operations
      "enter": "project_panel::Rename",
      "space": "project_panel::Open",
      "left": "project_panel::CollapseSelectedEntry",
      "right": "project_panel::ExpandSelectedEntry"
    }
  },

  // AI Assistant Panel
  {
    "context": "AgentPanel",
    "use_key_equivalents": true,
    "bindings": {
      // Navigation
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      
      // AI operations
      "cmd-n": "agent::NewThread",
      "cmd-alt-n": "agent::NewTextThread",
      "cmd-shift-h": "agent::OpenHistory",
      "cmd-i": "agent::ToggleProfileSelector",
      "cmd-shift-a": "agent::ToggleContextPicker",
      "cmd->": "assistant::QuoteSelection",
      "cmd-enter": "agent::Chat"
    }
  },

  // AI Message Editor
  {
    "context": "MessageEditor && !Picker > Editor && !use_modifier_to_send",
    "use_key_equivalents": true,
    "bindings": {
      "enter": "agent::Chat",
      "cmd-enter": "agent::ChatWithFollow",
      "cmd-i": "agent::ToggleProfileSelector",
      "ctrl-enter": "assistant::InlineAssist"
    }
  },

  // Git Panel
  {
    "context": "GitPanel && ChangesList",
    "use_key_equivalents": true,
    "bindings": {
      // Navigation
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight", 
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      
      // Git operations
      "up": "menu::SelectPrevious",
      "down": "menu::SelectNext",
      "enter": "menu::Confirm",
      "space": "git::ToggleStaged",
      "cmd-y": "git::StageFile",
      "cmd-shift-y": "git::UnstageFile",
      "tab": "git_panel::FocusEditor",
      "escape": "git_panel::ToggleFocus"
    }
  },

  // Buffer Search
  {
    "context": "BufferSearchBar",
    "use_key_equivalents": true,
    "bindings": {
      "escape": "buffer_search::Dismiss",
      "tab": "buffer_search::FocusEditor",
      "enter": "search::SelectNextMatch",
      "shift-enter": "search::SelectPreviousMatch",
      "cmd-f": "search::FocusSearch"
    }
  },

  // Pane management
  {
    "context": "Pane",
    "use_key_equivalents": true,
    "bindings": {
      // Tab navigation
      "alt-cmd-left": "pane::ActivatePreviousItem",
      "cmd-{": "pane::ActivatePreviousItem",
      "alt-cmd-right": "pane::ActivateNextItem", 
      "cmd-}": "pane::ActivateNextItem",
      
      // Tab management
      "cmd-w": ["pane::CloseActiveItem", { "close_pinned": false }],
      "ctrl-1": ["pane::ActivateItem", 0],
      "ctrl-2": ["pane::ActivateItem", 1],
      "ctrl-3": ["pane::ActivateItem", 2],
      "ctrl-4": ["pane::ActivateItem", 3],
      "ctrl-0": "pane::ActivateLastItem",
      
      // Search
      "cmd-f": "project_search::ToggleFocus",
      "cmd-g": "search::SelectNextMatch",
      "cmd-shift-g": "search::SelectPreviousMatch"
    }
  },

  // Sneak motion (vim-style)
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      "s": ["vim::PushSneak", {}],
      "S": ["vim::PushSneakBackward", {}]
    }
  },

  // Dock navigation
  {
    "context": "Dock",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },

  // Context editor (AI assistant)
  {
    "context": "ContextEditor > Editor",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-enter": "assistant::Assist",
      "cmd-s": "workspace::Save",
      "cmd-<": "assistant::InsertIntoEditor",
      "shift-enter": "assistant::Split",
      "ctrl-r": "assistant::CycleMessageRole",
      "enter": "assistant::ConfirmCommand",
      "alt-enter": "editor::Newline"
    }
  },

  // Picker
  {
    "context": "Picker > Editor",
    "use_key_equivalents": true,
    "bindings": {
      "escape": "menu::Cancel",
      "up": "menu::SelectPrevious",
      "down": "menu::SelectNext",
      "tab": "picker::ConfirmCompletion",
      "alt-enter": ["picker::ConfirmInput", { "secondary": false }],
      "cmd-alt-enter": ["picker::ConfirmInput", { "secondary": true }]
    }
  },

  // Split commands (Atom-style)
  {
    "context": "Pane",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-k up": "pane::SplitUp",
      "cmd-k down": "pane::SplitDown",
      "cmd-k left": "pane::SplitLeft", 
      "cmd-k right": "pane::SplitRight",
      "cmd-\\": "pane::SplitRight"
    }
  }
]